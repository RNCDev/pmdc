"""
Pydantic schemas related to the canonical data format stored in the database.
"""

# from pydantic import BaseModel, Field
# from datetime import datetime
# from decimal import Decimal
# from typing import Optional, Dict, Any
# from .base_schema import CustomBaseModel # Or just from pydantic import BaseModel

# # --- Base Canonical Transaction --- #
# class CanonicalTransactionBase(BaseModel): # Use CustomBaseModel if defined
#     """Fields common to both creation and reading of canonical records."""
#     transaction_type: str = Field(..., description="Type of transaction, e.g., CAPITAL_CALL")
#     transaction_date: datetime = Field(..., description="Effective date of the transaction")
#     amount: Decimal = Field(..., max_digits=18, decimal_places=4, description="Transaction amount")
#     currency: str = Field(default="USD", min_length=3, max_length=3, description="ISO 4217 currency code")
#     fund_identifier: Optional[str] = Field(None, description="Identifier for the fund")
#     investor_identifier: Optional[str] = Field(None, description="Identifier for the investor/LP")
#     notice_identifier: Optional[str] = Field(None, description="Identifier from the source notice")
    
#     # Include provenance/audit fields if needed directly in the schema
#     source_schema_identifier: Optional[str] = Field(None, description="Identifier of the original publisher schema")
#     original_publisher_payload: Optional[Dict[str, Any]] = Field(None, description="Original data received from publisher")
#     original_saas_payload: Optional[Dict[str, Any]] = Field(None, description="Data received from SaaS provider")

# # --- Schema for Creating a Canonical Transaction --- #
# class CanonicalTransactionCreate(CanonicalTransactionBase):
#     """Schema used when creating a new canonical record in the database.
#     Typically used after translation from SaaS output.
#     """
#     # No additional fields needed if Base covers everything for creation
#     pass 

# # --- Schema for Reading a Canonical Transaction --- #
# class CanonicalTransaction(CanonicalTransactionBase):
#     """Schema used when reading a canonical record from the database (e.g., for API responses).
#     Includes fields that are generated by the database (like ID, timestamps).
#     """
#     id: int
#     publisher_id: int # Or potentially expose publisher external_id?
#     created_at: datetime
#     updated_at: Optional[datetime] = None

#     model_config = {
#         "from_attributes": True # Enable creating this schema from the ORM model
#     }

# # --- Schema for Intake Receipt --- #
# # Used as a response model for the intake endpoint
# class TransactionReceipt(BaseModel):
#     id: int
#     status: str = "PROCESSED" # Or QUEUED, FAILED etc. 